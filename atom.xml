<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay&#39;s Blog</title>
  
  <subtitle>不忘初心 方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.projay.com/"/>
  <updated>2017-12-24T15:28:10.958Z</updated>
  <id>http://blog.projay.com/</id>
  
  <author>
    <name>Jay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云Centos7下Nginx的安装和配置</title>
    <link href="http://blog.projay.com/2017/12/24/%E9%98%BF%E9%87%8C%E4%BA%91Centos7%E4%B8%8BNginx%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.projay.com/2017/12/24/阿里云Centos7下Nginx的搭建与配置/</id>
    <published>2017-12-24T15:23:00.000Z</published>
    <updated>2017-12-24T15:28:10.958Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="安装Nginx相关环境"><a href="#安装Nginx相关环境" class="headerlink" title="安装Nginx相关环境"></a>安装Nginx相关环境</h4><p>为了保证正常安装Nginx和安装后Nginx的正常使用，在安装前，需要安装如下软件</p><ol><li><p>GCC编译器<br>GCC（GNU Compiler Collection）可用于编译C/C++语言程序，我们下载的Nginx不是可以直接在Linux中可以运行的二进制程序（虽然1.2.x版本已经在某些操作系统上提供相应的二进制包了，但是这里学习最广泛使用的方式，将源码编译成二进制程序进行使用）<br>通过下面两句命令来安装GCC编译器</p><blockquote><p><code>yum install -y gcc</code><br><code>yum install -y gcc-c++</code></p></blockquote></li><li><p>PCRE库<br>PCRE（Perl Compatible Regular Expressions，Perl兼容正则表达式）是由Philip Hazel开发的函数库，这个库支持正则表达式。如果我们在配置文件nginx.conf中使用了正则表达式，就必须装上PCRE库，因为Nginx的HTTP模块需要靠PCRE库来解析正则表达式，如果你认定自己不会使用正则表达式，那么可以不装，这里建议装上，以防以后需要使用到正则表达式<br>命令如下</p><blockquote><p><code>yum install -y pcre pcre-devel</code><br>pcre-devel是使用PCRE做二次开发时所需要的开发库，包括头文件等，这也是编译Nginx所必须使用的。</p></blockquote></li><li><p>zlib库<br>zlib库用于对HTTP包的内容做gzip格式的压缩，来减少网络流量传送，当我们在nginx.conf中配置了gzip on，并指定了某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量，就必须在编译时将zlib库编译进Nginx<br>命令如下</p><blockquote><p><code>yum install -y zlib zlib-devel</code><br>zlib是直接使用的库，zlib-devel是二次开发所需要的库。</p></blockquote></li><li><p>OpenSSL开发库<br>如果想让Nginx在SSL协议上传送HTTP，也就是所谓的HTTPS，就需要装上OpenSSL，此外，如果我们还想使用MD5、SHA1等散列函数，那也必须安装上这个开发库<br>命令如下</p><blockquote><p><code>yum install -y openssl openssl-devel</code></p></blockquote></li><li><p>注意<br>也可以一次性安装gcc,zlib,openssl环境</p><blockquote><p><code>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code></p></blockquote></li></ol><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><p>　下载nginx:</p><blockquote><p><code>wget http://nginx.org/download/nginx-1.6.2.tar.gz</code></p></blockquote><p>　解压安装包： </p><blockquote><p><code>tar zxvf nginx-1.6.2.tar.gz</code></p></blockquote><p>　进入安装包目录：cd</p><blockquote><p><code>nginx-1.6.2</code></p></blockquote><p>　编译安装：</p><blockquote><p><code>./configure,默认地址 /usr/local/nginx</code></p></blockquote><p>　安装：</p><blockquote><p><code>make &amp;&amp; make install</code></p></blockquote><p>  Nginx操作:</p><blockquote><p><code>cd /usr/local/nginx/sbin</code><br>启动nginx<br><code>./nginx</code><br>重新载入配置<br><code>./nginx -s reload</code><br>重新启动Nginx<br><code>./nginx -s reopen</code><br>停止Nginx<br><code>./nginx -s stop</code></p></blockquote><p>启动完Nginx后，你就可以通过主机IP来访问nginx了，出现下面这个界面表示Nginx就搞定了（我对默认界面进行了一些修改），如果不能访问，可以查询一下自己防火墙的配置，是否开放了Web服务所需要的端口，如果你的服务器上在腾讯云、阿里云或者某个云上的，可以看看自己为该服务器配置的安全策略是否允许Web服务所需要的端口可以接收和发送相应的数据</p><p>可以看一下CentOS7中，配置防火墙的命令</p><blockquote><p>允许相应的端口<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=9000/tcp --permanent</code><br>重新载入配置<br><code>firewall-cmd --reload</code></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/2993907-27b8cf62d6b5a531.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="配置Nginx自启动"><a href="#配置Nginx自启动" class="headerlink" title="配置Nginx自启动"></a>配置Nginx自启动</h4><p>至此，安装完成！但是每次要进行到相应的路径来启动Nginx太麻烦了，这里可以在etc/init.d目录下创建一个启动脚本，通过这个脚本来启动Nginx，这样启动Nginx会方便很多</p><blockquote><p>在etc/init.d目录下创建nginx脚本<br><code>vim /etc/init.d/nginx</code></p></blockquote><p>然后将下面内容复制并保存到这个nginx脚本文件中</p><blockquote><p><code>#!/bin/sh</code><br><code>#</code><br><code># nginx - this script starts and stops the nginx daemin</code><br><code>#</code><br><code># chkconfig:  - 85 15</code><br><code># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</code><br><code>#              proxy and IMAP/POP3 proxy server</code><br><code># processname: nginx</code><br><code># config:      /usr/local/nginx/conf/nginx.conf</code><br><code># pidfile:    /usr/local/nginx/logs/nginx.pid</code><br><code># Source function library.</code><br><code>. /etc/rc.d/init.d/functions</code><br><code># Source networking configuration.</code><br><code>. /etc/sysconfig/network</code><br><code># Check that networking is up.</code><br><code>[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0</code><br><code>nginx=&quot;/usr/local/nginx/sbin/nginx&quot;</code><br><code>prog=$(basename $nginx)</code><br><code>NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;</code><br><code>lockfile=/var/lock/subsys/nginx</code><br><code>start() {</code><br><code>[ -x $nginx ] || exit 5</code><br><code>[ -f $NGINX_CONF_FILE ] || exit 6</code><br><code>echo -n $&quot;Starting $prog: &quot;</code><br><code>daemon $nginx -c $NGINX_CONF_FILE</code><br><code>retval=$?</code><br><code>echo</code><br><code>[ $retval -eq 0 ] &amp;&amp; touch $lockfile</code><br><code>return $retval</code><br><code>}</code><br><code>stop() {</code><br><code>echo -n $&quot;Stopping $prog: &quot;</code><br><code>killproc $prog -QUIT</code><br><code>retval=$?</code><br><code>echo</code><br><code>[ $retval -eq 0 ] &amp;&amp; rm -f $lockfile</code><br><code>return $retval</code><br><code>}</code><br><code>restart() {</code><br><code>configtest || return $?</code><br><code>stop</code><br><code>start</code><br><code>}</code><br><code>reload() {</code><br><code>configtest || return $?</code><br><code>echo -n $&quot;Reloading $prog: &quot;</code><br><code>killproc $nginx -HUP</code><br><code>RETVAL=$?</code><br><code>echo</code><br><code>}</code><br><code>force_reload() {</code><br><code>restart</code><br><code>}</code><br><code>configtest() {</code><br><code>$nginx -t -c $NGINX_CONF_FILE</code><br><code>}</code><br><code>rh_status() {</code><br><code>status $prog</code><br><code>}</code><br><code>rh_status_q() {</code><br><code>rh_status &gt;/dev/null 2&gt;&amp;1</code><br><code>}</code><br><code>case &quot;$1&quot; in</code><br><code>start)</code><br><code>rh_status_q &amp;&amp; exit 0</code><br><code>$1</code><br><code>;;</code><br><code>stop</code><br><code>rh_status_q || exit 0</code><br><code>$1</code><br><code>;;</code><br><code>restart|configtest)</code><br><code>$1</code><br><code>;;</code><br><code>reload)</code><br><code>rh_status_q || exit 7</code><br><code>$1</code><br><code>;;</code><br><code>force-reload)</code><br><code>force_reload</code><br><code>;;</code><br><code>status)</code><br><code>rh_status</code><br><code>;;</code><br><code>condrestart|try-restart)</code><br><code>rh_status_q || exit 0</code><br><code>;;</code><br><code>*)</code><br><code>echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;</code><br><code>exit 2</code><br><code>esac</code></p></blockquote><p>接着为这个脚本添加执行权限</p><blockquote><p> <code>chmod +x /etc/init.d/nginx</code></p></blockquote><p>并将Nginx添加到系统自启动组中</p><blockquote><p><code>chkconfig --add /etc/init.d/nginx</code></p></blockquote><p>最后将开启自启动</p><blockquote><p><code>chkconfig nginx on</code></p></blockquote><p>经过上面的配置后，就可以通过下面的命令来操作nginx了</p><blockquote><p><code>service nginx reload</code>    重新加载配置<br><code>service nginx start</code> 启动Nginx</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;安装Nginx相关环境&quot;&gt;&lt;a href=&quot;#安装Nginx相关环境&quot; class=&quot;headerlink&quot; title=&quot;安装Nginx相关环境&quot;&gt;&lt;/a&gt;安装N
      
    
    </summary>
    
      <category term="Linux" scheme="http://blog.projay.com/categories/Linux/"/>
    
    
      <category term="Nginx" scheme="http://blog.projay.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
