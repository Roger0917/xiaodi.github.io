<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nginx+Tomcat+Redis实现负载均衡]]></title>
    <url>%2F2018%2F01%2F11%2FNginx-Tomcat-Redis%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%2F</url>
    <content type="text"><![CDATA[1.负载均衡 安装配置JDK 到Oracle官网下载JDK，这里我是用的jdk-8u151-linux-x64.tar.gz 使用winscp可视化工具上传jdk到服务器并解压1tar -xzvf jdk1.8.0_151 配置JDK环境变量,这里也贴出了Tomcat的配置1vim /etc/profile 1source /etc/profile 更新后重新生效 安装配置Tomcat到Tomcat官网下载,这里我分别下载了Tomcat8 和 Tomcat9,然后上传并解压 然后因为配置负载均衡两个Tomcat的端口肯定不能一样，所以需要配置server.xml1vim /你的Tomcat路径/conf/server.xml ==分别修改启动端口,关闭端口和AJP端口==,转发端口不用改,修改后记得重启 配置Nginx 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566 #下面是server虚拟主机的配置 48 upstream mytomcats &#123; 49 server 127.0.0.1:8080 weight=2 max_fails=2 fail_timeout=30s; 50 server 127.0.0.1:8000 weight=1 max_fails=2 fail_timeout=30s;++ 51 &#125; 52 server 53 &#123; 54 listen 80;#监听端口 55 server_name localhost;#域名 56 index index.html index.htm index.php; 57 root /usr/local/nginx/html;#站点目录 58 location ~ .*\.(php|php5)?$ 59 &#123; 60 #fastcgi_pass unix:/tmp/php-cgi.sock; 61 fastcgi_pass 127.0.0.1:9000; 62 fastcgi_index index.php; 63 include fastcgi.conf; 64 &#125; 65 #配置关于css和js静态文件的加载 66 location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)$ &#123; 67 proxy_pass http://mytomcats; 68 &#125; 69 #-------------------------- 70 location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$ 71 &#123; 72 expires 30d; 73 # access_log off; 74 &#125; 75 location ~ .*\.(js|css)?$ 76 &#123; 77 expires 15d; 78 # access_log off; 79 &#125; 80 access_log off; 81 location / &#123; 82 83 proxy_pass http://mytomcats; 84 85 proxy_redirect off; 86 87 proxy_set_header Host $host; 88 89 proxy_set_header X-Real-IP $remote_addr; 90 91 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 92 93 client_max_body_size 10m; 94 95 client_body_buffer_size 128k; 96 97 proxy_connect_timeout 90; 98 99 proxy_send_timeout 90;100 101 proxy_read_timeout 90;102 103 proxy_buffer_size 4k;104 105 proxy_buffers 4 32k;106 107 proxy_busy_buffers_size 64k;108 109 proxy_temp_file_write_size 64k;110 &#125;111 &#125;112 &#125; 123重启nginxvim nginx/sbin./nginx -s reload 4.测试 ==建议nginx使用80端口,== Tomcat端口无所谓,我是使用的8080和8000可以访问我的服务器ip刷新后可以发现nginx将不同的请求反向代理到不同的tomcat,则负载均衡配置完成 2.配置Tomcat打开JMS使用JConsole连接Tomcat 修改tomcat_home/bin/catalina.sh 文件，搜索 Execute The Requested Command 字样，在其上，添加 123456CATALINA_OPTS=&quot;$CATALINA_OPTS -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=[服务器ip]-Dcom.sun.management.jmxremote.port=[端口] 注意不要和其他的端口冲突,我这里是用的8888-Dcom.sun.management.jmxremote.ssl=false-Dcom.sun.management.jmxremote.authenticate=false&quot; 2.由于jmx的安全设置,需要找到/jdk/jre/lib/managment/jmxremote.password.template,cp此文件并重命名为jmxremote.password,找到最后两行去掉注释,保存重启tomcat3.在本机打开JDK下的bin目录下的jconsole.exe文件,按照如下配置,选择不安全连接,即可远程监控tomcat 3.session共享问题 1.使用iphashnginx中的ip_hash技术能够将某个ip的请求定向到同一台后端，这样一来这个ip下的某个客户端和某个后端就能建立起稳固的session，ip_hash是在upstream配置中定义的：]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云Centos7下Nginx的安装和配置]]></title>
    <url>%2F2017%2F12%2F24%2F%E9%98%BF%E9%87%8C%E4%BA%91Centos7%E4%B8%8BNginx%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[安装Nginx相关环境为了保证正常安装Nginx和安装后Nginx的正常使用，在安装前，需要安装如下软件 GCC编译器GCC（GNU Compiler Collection）可用于编译C/C++语言程序，我们下载的Nginx不是可以直接在Linux中可以运行的二进制程序（虽然1.2.x版本已经在某些操作系统上提供相应的二进制包了，但是这里学习最广泛使用的方式，将源码编译成二进制程序进行使用）通过下面两句命令来安装GCC编译器 yum install -y gccyum install -y gcc-c++ PCRE库PCRE（Perl Compatible Regular Expressions，Perl兼容正则表达式）是由Philip Hazel开发的函数库，这个库支持正则表达式。如果我们在配置文件nginx.conf中使用了正则表达式，就必须装上PCRE库，因为Nginx的HTTP模块需要靠PCRE库来解析正则表达式，如果你认定自己不会使用正则表达式，那么可以不装，这里建议装上，以防以后需要使用到正则表达式命令如下 yum install -y pcre pcre-develpcre-devel是使用PCRE做二次开发时所需要的开发库，包括头文件等，这也是编译Nginx所必须使用的。 zlib库zlib库用于对HTTP包的内容做gzip格式的压缩，来减少网络流量传送，当我们在nginx.conf中配置了gzip on，并指定了某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量，就必须在编译时将zlib库编译进Nginx命令如下 yum install -y zlib zlib-develzlib是直接使用的库，zlib-devel是二次开发所需要的库。 OpenSSL开发库如果想让Nginx在SSL协议上传送HTTP，也就是所谓的HTTPS，就需要装上OpenSSL，此外，如果我们还想使用MD5、SHA1等散列函数，那也必须安装上这个开发库命令如下 yum install -y openssl openssl-devel 注意也可以一次性安装gcc,zlib,openssl环境 yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 安装Nginx 下载nginx: wget http://nginx.org/download/nginx-1.6.2.tar.gz 解压安装包： tar zxvf nginx-1.6.2.tar.gz 进入安装包目录：cd nginx-1.6.2 编译安装： ./configure,默认地址 /usr/local/nginx 安装： make &amp;&amp; make install Nginx操作: cd /usr/local/nginx/sbin启动nginx./nginx重新载入配置./nginx -s reload重新启动Nginx./nginx -s reopen停止Nginx./nginx -s stop 启动完Nginx后，你就可以通过主机IP来访问nginx了，出现下面这个界面表示Nginx就搞定了（我对默认界面进行了一些修改），如果不能访问，可以查询一下自己防火墙的配置，是否开放了Web服务所需要的端口，如果你的服务器上在腾讯云、阿里云或者某个云上的，可以看看自己为该服务器配置的安全策略是否允许Web服务所需要的端口可以接收和发送相应的数据 可以看一下CentOS7中，配置防火墙的命令 允许相应的端口firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --zone=public --add-port=3306/tcp --permanentfirewall-cmd --zone=public --add-port=9000/tcp --permanent重新载入配置firewall-cmd --reload 配置Nginx自启动至此，安装完成！但是每次要进行到相应的路径来启动Nginx太麻烦了，这里可以在etc/init.d目录下创建一个启动脚本，通过这个脚本来启动Nginx，这样启动Nginx会方便很多 在etc/init.d目录下创建nginx脚本vim /etc/init.d/nginx 然后将下面内容复制并保存到这个nginx脚本文件中 #!/bin/sh## nginx - this script starts and stops the nginx daemin## chkconfig: - 85 15# description: Nginx is an HTTP(S) server, HTTP(S) reverse \# proxy and IMAP/POP3 proxy server# processname: nginx# config: /usr/local/nginx/conf/nginx.conf# pidfile: /usr/local/nginx/logs/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0nginx=&quot;/usr/local/nginx/sbin/nginx&quot;prog=$(basename $nginx)NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;lockfile=/var/lock/subsys/nginxstart() {[ -x $nginx ] || exit 5[ -f $NGINX_CONF_FILE ] || exit 6echo -n $&quot;Starting $prog: &quot;daemon $nginx -c $NGINX_CONF_FILEretval=$?echo[ $retval -eq 0 ] &amp;&amp; touch $lockfilereturn $retval}stop() {echo -n $&quot;Stopping $prog: &quot;killproc $prog -QUITretval=$?echo[ $retval -eq 0 ] &amp;&amp; rm -f $lockfilereturn $retval}restart() {configtest || return $?stopstart}reload() {configtest || return $?echo -n $&quot;Reloading $prog: &quot;killproc $nginx -HUPRETVAL=$?echo}force_reload() {restart}configtest() {$nginx -t -c $NGINX_CONF_FILE}rh_status() {status $prog}rh_status_q() {rh_status &gt;/dev/null 2&gt;&amp;1}case &quot;$1&quot; instart)rh_status_q &amp;&amp; exit 0$1;;stoprh_status_q || exit 0$1;;restart|configtest)$1;;reload)rh_status_q || exit 7$1;;force-reload)force_reload;;status)rh_status;;condrestart|try-restart)rh_status_q || exit 0;;*)echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;exit 2esac 接着为这个脚本添加执行权限 chmod +x /etc/init.d/nginx 并将Nginx添加到系统自启动组中 chkconfig --add /etc/init.d/nginx 最后将开启自启动 chkconfig nginx on 经过上面的配置后，就可以通过下面的命令来操作nginx了 service nginx reload 重新加载配置service nginx start 启动Nginx]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
</search>
